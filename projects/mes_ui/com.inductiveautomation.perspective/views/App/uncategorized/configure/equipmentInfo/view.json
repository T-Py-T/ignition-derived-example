{
  "custom": {},
  "params": {
    "UUID": "",
    "eqInfoType": "state",
    "eqObjectType": "value",
    "eqPath": ""
  },
  "propConfig": {
    "params.UUID": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.eqInfoType": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.eqObjectType": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.eqPath": {
      "onChange": {
        "enabled": null,
        "script": "\tsystem.perspective.sendMessage(\u0027refresh\u0027, {})"
      },
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 50,
      "width": 300
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "title"
        },
        "position": {
          "basis": "20px",
          "grow": 1,
          "shrink": 0
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "path": "view.params.eqInfoType"
              },
              "transforms": [
                {
                  "fallback": "Unknown",
                  "inputType": "scalar",
                  "mappings": [
                    {
                      "input": "mode",
                      "output": "Equipment Mode Class"
                    },
                    {
                      "input": "state",
                      "output": "Equipment State Class"
                    },
                    {
                      "input": "schedule",
                      "output": "Equipment Schedule"
                    }
                  ],
                  "outputType": "scalar",
                  "type": "map"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Cards/header"
          }
        },
        "type": "ia.display.label"
      },
      {
        "children": [
          {
            "meta": {
              "name": "currentSelection"
            },
            "position": {
              "shrink": 0
            },
            "props": {
              "style": {
                "fontFamily": "sans-serif",
                "fontWeight": "bold",
                "textIndent": "0.5ch"
              },
              "text": "Current Selection:"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "selectionValue"
            },
            "position": {
              "basis": "50px",
              "grow": 1,
              "shrink": 0
            },
            "props": {
              "style": {
                "fontFamily": "sans-serif",
                "textIndent": "0.5ch"
              },
              "text": "N/A"
            },
            "type": "ia.display.label"
          },
          {
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "script": "\tpayload \u003d {}\n\tpayload[\u0027eqInfoType\u0027] \u003d self.view.params.eqInfoType\n\tpayload[\u0027UUID\u0027] \u003d self.view.params.UUID\n\t\n\tsystem.perspective.sendMessage(\u0027editStart\u0027, payload)\n\t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "change"
            },
            "position": {
              "basis": "10px",
              "grow": 1,
              "shrink": 0
            },
            "propConfig": {
              "props.style.color": {
                "binding": {
                  "config": {
                    "expression": "if(({../selectionValue.props.text} \u003d \u0027N/A\u0027\r\n|| {../selectionValue.props.text} \u003d \u0027\u0027) || {view.params.eqInfoType} !\u003d\u0027state\u0027,\r\n\u0027#D5D5D5\u0027, \u0027#0000FF\u0027)\r\n//if({../selectionValue.props.text} \u003d \u0027N/A\u0027\r\n//|| {../selectionValue.props.text} \u003d \u0027\u0027,\r\n//\u0027#D5D5D5\u0027, \u0027#0000FF\u0027)\r\n\r\n"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "cursor": "pointer",
                "fontFamily": "sans-serif",
                "fontSize": "10pt",
                "textAlign": "right"
              },
              "text": "change"
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "info"
        },
        "position": {
          "basis": "20px",
          "grow": 1,
          "shrink": 0
        },
        "props": {
          "style": {
            "marginTop": "0.25rem"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column"
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "refresh",
          "pageScope": true,
          "script": "\t# implement your handler here\n\tinfoType \u003d self.view.params.eqInfoType\n\teqPath \u003d self.view.params.eqPath\n\tif eqPath is not None:\n\t\tselection \u003d \u0027None\u0027\n\t\ttry:\n\t\t\tobj \u003d system.mes.loadMESObject(eqPath, self.view.params.eqObjectType)\n\t\t\tif infoType \u003d\u003d \u0027state\u0027:\n\t\t\t\tUUID \u003d obj.getEquipmentStateClassUUID()\n\t\t\t\tself.view.params.UUID \u003d UUID\n\t\t\t\tselection \u003d system.mes.getMESObjectLink(UUID).getName()\n\t\t\telif infoType \u003d\u003d \u0027mode\u0027:\n\t\t\t\tUUID \u003d obj.getEquipmentModeClassUUID() \n\t\t\t\tself.view.params.UUID \u003d UUID\n\t\t\t\tselection \u003d system.mes.getMESObjectLink(UUID).getName()\n\t\t\telif infoType \u003d\u003d \u0027schedule\u0027:\n\t\t\t\tselection \u003d obj.getIgnitionSchedule()\n\t\t\t\t\n\t\texcept:\n\t\t\tselection \u003d \u0027N/A\u0027\t\n\t\t\n\t\t\n\t\tif selection \u003d\u003d \u0027\u0027:\n\t\t\tselection \u003d \u0027None\u0027\n\t\tself.getChild(\"info\").getChild(\"selectionValue\").props.text \u003d selection\n\telse:\n\t\tself.getChild(\"info\").getChild(\"selectionValue\").props.text \u003d \u0027N/A\u0027",
          "sessionScope": false,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}